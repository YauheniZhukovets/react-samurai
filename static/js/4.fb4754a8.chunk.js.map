{"version":3,"sources":["Component/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","Component/Dialogs/Message/Message.tsx","Component/Dialogs/DialogsItem/DialogsItem.tsx","Component/Dialogs/Dialogs.tsx","Component/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Message","message","className","s","dialog","DialogItems","id","name","path","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","Textarea","validate","required","placeholder","type","compose","dialogsPage","dispatch","AddMessage","newMessageBody","AddMessageAC","dialogElement","dialogsData","map","m","messageElement","massagesData","dialogs","dialogsItems","messages","values"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,mHCOxIC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAqBC,GAQjC,OAAOC,YAAQN,EAARM,EAPmB,SAACC,GAA4B,IAC9CL,EAAwBK,EAAxBL,OAAWM,EADkC,YACrBD,EADqB,YAElD,OAAKL,EAEE,cAACG,EAAD,eAAeG,IAFF,cAAC,IAAD,CAAUC,GAAG,gB,qGCV5BC,EAAU,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,QAErB,OAAO,qBAAKC,UAAWC,IAAEC,OAAlB,SAA2BH,K,QCAzBI,EAAc,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,GAAIC,EAA4B,EAA5BA,KACzBC,EAAO,YAAcF,EAEzB,OAAO,qBAAKJ,UAAWC,IAAEC,OAAlB,SACH,cAAC,IAAD,CAASL,GAAIS,EAAb,SAAoBD,O,kCC2BtBE,EAAYC,YAAiB,IAoB7BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAlBsC,SAACf,GAAW,IACnEiB,EAAgBjB,EAAhBiB,aAEP,OAAQ,uBAAMC,SAAUD,EAAhB,UACA,8BACI,cAACE,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBF,KAAM,iBACNc,YAAa,yBAGxB,8BACI,wBAAQC,KAAM,SAAd,0B,SCrBDC,4BACX3B,aAhBoB,SAACL,GACrB,MAAO,CACHiC,YAAajC,EAAMiC,YACnBhC,OAAQD,EAAME,KAAKD,WAIF,SAACiC,GACtB,MAAO,CACHC,WAAY,SAACC,GACTF,EAASG,YAAaD,SAO9BjC,IAFW6B,EDvBQ,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,YAAaE,EAAmC,EAAnCA,WAE5BG,EAAgBL,EAAYM,YAAYC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAwBzB,KAAMyB,EAAEzB,KAAMD,GAAI0B,EAAE1B,IAA1B0B,EAAE1B,OAEvE2B,EAAiBT,EAAYU,aAAaH,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAoB/B,QAAS+B,EAAE/B,SAAjB+B,EAAE1B,OAM3E,OACI,8BACI,sBAAKJ,UAAWC,IAAEgC,QAAlB,UACI,qBAAKjC,UAAWC,IAAEiC,aAAlB,SACKP,IAEL,sBAAK3B,UAAWC,IAAEkC,SAAlB,UACI,8BAAMJ,IACN,cAACtB,EAAD,CAAqBI,SAZf,SAACuB,GACnBZ,EAAWY,EAAOX","file":"static/js/4.fb4754a8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__DuvPV\",\"dialogsItems\":\"Dialogs_dialogsItems__WSdAR\",\"active\":\"Dialogs_active__31eY6\",\"messages\":\"Dialogs_messages__-YLeO\"};","import React, {Component, ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../Redux/reduxStore';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = ({message,}: MessagePropsType) => {\r\n\r\n    return <div className={s.dialog}>{message}</div>\r\n}\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItems = ({id, name,}: DialogItemsType) => {\r\n    let path = '/dialogs/' + id\r\n\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{name}</NavLink>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItems} from './DialogsItem/DialogsItem';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\n\r\nexport const Dialogs = ({dialogsPage, AddMessage,}: DialogsPropsType) => {\r\n\r\n    const dialogElement = dialogsPage.dialogsData.map((m) => <DialogItems key={m.id} name={m.name} id={m.id}/>)\r\n\r\n    const messageElement = dialogsPage.massagesData.map((m) => <Message key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        AddMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogElement}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>{messageElement}</div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n\r\n    return (<form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {connect} from 'react-redux';\r\nimport {AddMessageAC, InitialStateDialogsType} from '../../Redux/dialogsReducer';\r\nimport {AppStateType} from '../../Redux/reduxStore';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {Dialogs} from './Dialogs';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateDialogsType\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    AddMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddMessage: (newMessageBody: string) => {\r\n            dispatch(AddMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}
{"version":3,"sources":["component/Common/FormsControls/FormsControls.tsx","component/Common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","component/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","component/Common/WithRouter/withRouter.tsx","component/Dialogs/Message/Message.tsx","component/Dialogs/DialogsItem/DialogsItem.tsx","component/Dialogs/Avatar/Avatar.tsx","component/Dialogs/Dialogs.tsx","component/Dialogs/DialogsContainer.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","props","input","child","restProps","Input","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","withRouter","WrapperComponent","location","useLocation","navigate","useNavigate","params","useParams","router","Message","message","textMessage","DialogItems","id","name","path","dialog","isActive","activeLink","link","Avatar","avatar","src","alt","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","formTextarea","component","validate","placeholder","buttonDialogs","SuperButton","type","compose","dialogsPage","dispatch","AddMessage","newMessageBody","AddMessageAC","dialogElement","dialogsData","map","m","messageElement","massagesData","avatarElement","avatarData","dialogsContainer","dialogs","avatarContainer","dialogsItems","messages","formContainer","values"],"mappings":"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","file":"static/js/5.e4094b7a.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nconst FormControl = ({meta, children,}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...props.input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...props.input} {...restProps} /></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3RLDu\",\"error\":\"FormsControls_error__2bFT9\",\"formSummaryError\":\"FormsControls_formSummaryError__3yqtq\"};","\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n\r\n    return (value: string) => {\r\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbol`\r\n        return undefined\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsContainer\":\"Dialogs_dialogsContainer__3XyW7\",\"dialogsItems\":\"Dialogs_dialogsItems__XkYu9\",\"dialogs\":\"Dialogs_dialogs__3c2Hp\",\"dialog\":\"Dialogs_dialog__3uEkx\",\"activeLink\":\"Dialogs_activeLink__2tTeQ\",\"link\":\"Dialogs_link__1p-6w\",\"messages\":\"Dialogs_messages__1xCp2\",\"textMessage\":\"Dialogs_textMessage__1nWoV\",\"avatarContainer\":\"Dialogs_avatarContainer__P0VNk\",\"avatar\":\"Dialogs_avatar__29rn3\",\"formContainer\":\"Dialogs_formContainer__2xIjH\",\"formTextarea\":\"Dialogs_formTextarea__qv0qt\",\"buttonDialogs\":\"Dialogs_buttonDialogs__ooljg\"};","import React, {ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/reduxStore';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import {useLocation, useNavigate, useParams} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\ntype ComponentWithRouterPropsType = {\r\n    location: any\r\n    navigate: any\r\n    params: { userId: string }\r\n}\r\nexport type WithRouterType = {\r\n    router: ComponentWithRouterPropsType\r\n}\r\n\r\nexport const withRouter = (WrapperComponent: typeof React.Component) => (props: object) => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n\r\n    return (\r\n        <WrapperComponent\r\n            {...props} router={{location, navigate, params}}\r\n        />\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = ({message,}: MessagePropsType) => {\r\n\r\n    return <div>\r\n        <span className={s.textMessage}>{message}</span>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItems = ({id, name,}: DialogItemsType) => {\r\n    const path = `/dialogs/${id}`\r\n    const setActive = ({isActive}: { isActive: boolean }) => isActive ? s.activeLink : s.link\r\n\r\n    return <div className={s.dialog}>\r\n        <NavLink className={setActive} to={path}>{name}</NavLink>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    avatar: string\r\n}\r\n\r\nexport const Avatar = ({avatar,}: MessagePropsType) => {\r\n    return <img className={s.avatar} src={avatar}  alt={'avatar'}/>\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItems} from './DialogsItem/DialogsItem';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../Common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\nimport {Avatar} from './Avatar/Avatar';\r\nimport SuperButton from '../Common/SuperButton/SuperButton';\r\n\r\n\r\nexport const Dialogs = ({dialogsPage, AddMessage,}: DialogsPropsType) => {\r\n\r\n    const dialogElement = dialogsPage.dialogsData.map((m) => <DialogItems key={m.id} name={m.name} id={m.id}/>)\r\n    const messageElement = dialogsPage.massagesData.map((m) => <Message key={m.id} message={m.message}/>)\r\n    const avatarElement = dialogsPage.avatarData.map((m) => <Avatar key={m.id} avatar={m.link}/>)\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        AddMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogsContainer}>\r\n                <div className={s.dialogs}>\r\n                    <div className={s.avatarContainer}>\r\n                        {avatarElement}\r\n                    </div>\r\n                    <div className={s.dialogsItems}>\r\n                        {dialogElement}\r\n                    </div>\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>\r\n                        {messageElement}\r\n                    </div>\r\n                    <div className={s.formContainer}>\r\n                        <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n\r\n    return (<form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field className={s.formTextarea}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                />\r\n            </div>\r\n            <div className={s.buttonDialogs}>\r\n                <SuperButton type={'submit'}>Send</SuperButton>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {connect} from 'react-redux';\r\nimport {AddMessageAC, InitialStateDialogsType} from '../../redux/dialogsReducer';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {Dialogs} from './Dialogs';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\nimport {withRouter} from '../Common/WithRouter/withRouter';\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateDialogsType\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    AddMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddMessage: (newMessageBody: string) => {\r\n            dispatch(AddMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}
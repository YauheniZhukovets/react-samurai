{"version":3,"sources":["component/Common/FormsControls/FormsControls.tsx","component/Common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","hoc/withAuthRedirect.tsx","component/Common/WithRouter/withRouter.tsx","component/Profile/ProfileInfo/ProfileInfo.module.scss","component/Common/SuperInputText/SuperInputText.module.css","component/Profile/ProfileInfo/ProfileData/ProfileDataForm.module.scss","component/Profile/ProfileInfo/ProfileData/ProfileData.module.scss","component/Profile/MyPosts/MyPosts.module.scss","component/Profile/MyPosts/Post/Post.module.scss","component/Common/SuperInputText/SuperInputText.tsx","component/Profile/ProfileInfo/ProfileStatus/ProfileStatusWithHooks.tsx","component/Profile/ProfileInfo/ProfileData/ProfileDataForm.tsx","component/Profile/ProfileInfo/ProfileData/ProfileData.tsx","component/Profile/ProfileInfo/ProfileInfo.tsx","component/Profile/MyPosts/Post/Post.tsx","component/Profile/MyPosts/MyPosts.tsx","component/Profile/MyPosts/MyPostsContainer.tsx","component/Profile/Profile.tsx","component/Profile/ProfileContainer.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","props","input","child","restProps","Input","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","withRouter","WrapperComponent","location","useLocation","navigate","useNavigate","params","useParams","router","SuperInputText","type","onChange","onChangeText","onKeyPress","onEnter","spanClassName","finalSpanClassName","finalInputClassName","errorInput","superInput","e","currentTarget","key","ProfileStatusWithHooks","statusText","updateStatusTC","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","editFormContainer","SuperButton","Field","formInput","name","component","placeholder","formTextarea","Object","keys","contacts","map","index","contactValue","formSummaryError","ProfileData","isOwner","goToEditMode","Preloader","keysContacts","valuesContacts","values","profileDataContainer","fullName","onClick","contact","contactTitle","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","ProfileInfo","savePhotoTC","saveProfileTC","profileBlock","avatarBlock","userAvatar","style","backgroundImage","photos","large","userPhoto","buttonFileContainer","id","inputFile","target","files","htmlFor","editModeContainer","initialValues","then","Post","photo","message","likesCount","item","textBlock","likeWrapper","postLikesCount","MyPosts","React","memo","profilePage","AddPost","postElements","postsData","m","potsBlock","myPostTitle","AddMyPostFormRedux","newPostBody","addMyPostForm","validate","button","MyPostsContainer","dispatch","addPostAC","Profile","ProfileContainer","userId","this","authorizedUserId","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","compose"],"mappings":"iOAGMA,EAAc,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,SAClBC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAS,UAAKC,IAAEC,YAAP,YAAsBL,EAAWI,IAAEF,MAAQ,IAAzD,UACI,8BACKH,IAEJC,GAAY,+BAAOF,EAAKI,YAKxBI,EAAW,SAACC,GACsBA,EAApCC,MAAoCD,EAA7BT,KAA6BS,EAAvBE,MADiB,IACPC,EADM,YACOH,EADP,0BAEpC,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAyB,oDAAcA,EAAMC,OAAWE,QAGtDC,EAAQ,SAACJ,GAC4BA,EAAvCC,MAAuCD,EAAhCT,KAAgCS,EAA1BR,SADc,IACDW,EADA,YACaH,EADb,6BAEjC,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAyB,iDAAWA,EAAMC,OAAWE,S,oBCtBhEE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCA3H,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAE7B,OAAO,SAACF,GACJ,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,c,mHCDzCE,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAqBC,GAQjC,OAAOC,YAAQN,EAARM,EAPmB,SAAClB,GAA4B,IAC9Cc,EAAwBd,EAAxBc,OAAWX,EADkC,YACrBH,EADqB,YAElD,OAAKc,EAEE,cAACG,EAAD,eAAed,IAFF,cAAC,IAAD,CAAUgB,GAAG,gB,mGCL5BC,EAAa,SAACC,GAAD,OAA8C,SAACrB,GACrE,IAAMsB,EAAWC,cACXC,EAAWC,cACXC,EAASC,cAEf,OACI,cAACN,EAAD,2BACQrB,GADR,IACe4B,OAAQ,CAACN,WAAUE,WAAUE,gB,oBClBpDrB,EAAOC,QAAU,CAAC,aAAe,kCAAkC,YAAc,iCAAiC,WAAa,gCAAgC,oBAAsB,yCAAyC,UAAY,+BAA+B,kBAAoB,yC,oBCA7RD,EAAOC,QAAU,CAAC,WAAa,mCAAmC,WAAa,mCAAmC,MAAQ,gC,oBCA1HD,EAAOC,QAAU,CAAC,kBAAoB,2CAA2C,UAAY,mCAAmC,aAAe,sCAAsC,aAAe,sCAAsC,iBAAmB,4C,oBCA7PD,EAAOC,QAAU,CAAC,qBAAuB,0CAA0C,QAAU,+B,oBCA7FD,EAAOC,QAAU,CAAC,UAAY,2BAA2B,YAAc,6BAA6B,cAAgB,+BAA+B,aAAe,8BAA8B,OAAS,0B,oBCAzMD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,WAAa,yBAAyB,UAAY,wBAAwB,YAAc,0BAA0B,eAAiB,+B,8KC0DhKuB,EA5C2C,SAAC,GAUtD,EARGC,KAQF,IAPEC,EAOH,EAPGA,SAAUC,EAOb,EAPaA,aACVC,EAMH,EANGA,WAAYC,EAMf,EANeA,QACZvC,EAKH,EALGA,MACAC,EAIH,EAJGA,UAAWuC,EAId,EAJcA,cAERhC,EAEN,6GAeKiC,EAAkB,UAAMvC,IAAEF,MAAR,YAAiBwC,GAAgC,IACnEE,EAAsB1C,EAAQE,IAAEyC,WAAL,UAAqB1C,EAArB,YAAkCC,IAAE0C,YAGrE,OACI,gCACI,mCACIT,KAAM,OACNC,SAtBa,SAACS,GACtBT,GACGA,EAASS,GAEZR,GAAgBA,EAAaQ,EAAEC,cAAcjC,QAmBrCyB,WAjBe,SAACO,GACxBP,GAAcA,EAAWO,GAEzBN,GACa,UAAVM,EAAEE,KACFR,KAaKtC,UAAWyC,GAEPlC,IAEPR,GAAS,qBAAKC,UAAWwC,EAAhB,SAAqCzC,QC9C9CgD,EAA2D,SAAC3C,GAAW,IACzE4C,EAA6B5C,EAA7B4C,WAAWC,EAAkB7C,EAAlB6C,eAD6D,EAG/CC,oBAAS,GAHsC,mBAGxEC,EAHwE,KAG9DC,EAH8D,OAInDF,mBAASF,GAJ0C,mBAIxEK,EAJwE,KAIhEC,EAJgE,KAM/EC,qBAAW,WACPD,EAAUD,KACX,CAACA,EAAQL,IAeZ,OACI,iCACMG,GACE,gCACI,yCAAe,sBAAMK,cAjBZ,WACrBJ,GAAY,IAgBe,SAAwCJ,GAAc,6BAG5EG,GACG,8BACI,cAAC,EAAD,CACIM,WAAS,EACTtB,SAfG,SAACS,GACpBU,EAAUV,EAAEC,cAAcjC,QAeV8C,OArBO,WACvBN,GAAY,GACZH,EAAeI,IAoBCzC,MAAOyC,U,qDC0BhBM,EADkBC,YAA4C,CAACC,KAAM,gBAAnDD,EA1D4E,SAACxD,GAAW,IAC9GL,EAAgCK,EAAhCL,MAAO+D,EAAyB1D,EAAzB0D,aAAcC,EAAW3D,EAAX2D,QAE5B,OACI,uBAAMC,SAAUF,EAAc9D,UAAWC,IAAEgE,kBAA3C,UACI,gCACI,8BACI,cAACC,EAAA,EAAD,qBAIJ,8BACI,8BACI,0CADJ,KAEI,cAACC,EAAA,EAAD,CAAOnE,UAAWC,IAAEmE,UAAWC,KAAM,WAAYC,UAAW9D,IAAO+D,YAAa,mBAGxF,8BACI,8BACI,kDADJ,KAEI,cAACJ,EAAA,EAAD,CAAOE,KAAM,iBAAkBC,UAAW9D,IAAO0B,KAAM,kBAI/D,8BACI,8BACI,0CADJ,KAEI,cAACiC,EAAA,EAAD,CAAOnE,UAAWC,IAAEuE,aAAcH,KAAM,4BAA6BC,UAAWnE,IACzEoE,YAAa,mBAI5B,8BACI,8BACI,yCADJ,KAEI,cAACJ,EAAA,EAAD,CAAOnE,UAAWC,IAAEuE,aAAcH,KAAM,UAAWC,UAAWnE,IACvDoE,YAAa,qBAIhC,gCACI,yCADJ,IAEKE,OAAOC,KAAKX,EAAQY,UAAUC,KAAI,SAAC9B,EAAK+B,GACrC,OACI,sBAAK7E,UAAWC,IAAE6E,aAAlB,UACI,4BAAIhC,IADR,MACmB,cAACqB,EAAA,EAAD,CAAOnE,UAAWC,IAAEmE,UAAWC,KAAM,YAAcvB,EAAKwB,UAAW9D,IAC5D+D,YAAazB,MAFF+B,SAQhD9E,GAAS,qBAAKC,UAAWC,IAAE8E,iBAAlB,SAAqChF,U,kBCpD9CiF,EAAc,SAAC,GAAuD,IAAtDjB,EAAqD,EAArDA,QAASkB,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,aAC3C,IAAKnB,EACD,OAAO,cAACoB,EAAA,EAAD,IAEX,IAAMC,EAAeX,OAAOC,KAAKX,EAAQY,UACnCU,EAAiBZ,OAAOa,OAAOvB,EAAQY,UAE7C,OACI,sBAAK3E,UAAWC,IAAEsF,qBAAlB,UACI,6BAAKxB,EAAQyB,WACb,8BACKP,GACG,cAACf,EAAA,EAAD,CAAauB,QAASP,EAAtB,4BAIR,sBAAKlF,UAAWC,IAAEyF,QAAlB,UACI,yCADJ,IAGQN,EAAaR,KAAI,SAAC9B,EAAK+B,GACnB,OAAO,cAAC,EAAD,CACSc,aAAc7C,EACdgC,aAAcO,EAAeR,IAFxBA,SAQjC,8BAAG,kDAAH,KAA8Bd,EAAQ6B,eAAiB,uCAAmB,yCACzE7B,EAAQ6B,gBACL,8BACI,8BAAG,0CAAH,KAAsB7B,EAAQ8B,+BAEtC,8BAAG,yCAAH,KAAqB9B,EAAQ+B,eAQ5BC,EAAU,SAAC,GAA+C,IAA9CJ,EAA6C,EAA7CA,aAAcb,EAA+B,EAA/BA,aACnC,OACI,8BAEQA,GACA,gCACI,4BAAIa,IADR,KAC4Bb,QCxC/BkB,EAAc,SAAC,GAO6B,IANzBjC,EAMwB,EANxBA,QACAV,EAKwB,EALxBA,OACAJ,EAIwB,EAJxBA,eACAgC,EAGwB,EAHxBA,QACAgB,EAEwB,EAFxBA,YACAC,EACwB,EADxBA,cACwB,EACpBhD,oBAAS,GADW,mBAC7CC,EAD6C,KACnCC,EADmC,KAgBpD,OAAKW,EAID,sBAAK/D,UAAWC,IAAEkG,aAAlB,UACI,sBAAKnG,UAAWC,IAAEmG,YAAlB,UACI,qBAAKpG,UAAWC,IAAEoG,WAAYC,MAAO,CAACC,gBAAgB,OAAD,OAASxC,EAAQyC,OAAOC,OAASC,IAAjC,QAEjDzB,GAAW,sBAAKjF,UAAWC,IAAE0G,oBAAlB,UACP,uBAAOzE,KAAK,OACLmC,KAAK,OACLuC,GAAG,OACH5G,UAAWC,IAAE4G,UACb1E,SA1BG,SAACS,GACvBA,EAAEkE,OAAOC,OACTd,EAAYrD,EAAEkE,OAAOC,MAAM,OA0Bf,uBAAOC,QAAQ,OAAf,iCAKZ,sBAAKhH,UAAWC,IAAEgH,kBAAlB,UAEQhC,EACM,cAAC,EAAD,CAAwBjC,WAAYK,EAAQJ,eAAgBA,IAC5D,gCAAK,yCAAe,+BAAOI,OAGjCF,EACM,cAAC,EAAD,CAAiB+D,cAAenD,EACfC,SApCtB,SAACD,GACdmC,EAAcnC,GACToD,MAAK,WACF/D,GAAY,OAkCeW,QAASA,IAE1B,cAAC,EAAD,CAAaA,QAASA,EACTkB,QAASA,EACTC,aAAc,kBAAM9B,GAAY,YAjCxD,cAAC+B,EAAA,EAAD,K,oDC/BFiC,EAAO,SAAC,GAAkD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,WAClC,OACI,sBAAKvH,UAAWC,IAAEuH,KAAlB,UACI,qBAAKxH,UAAWC,IAAEoG,WAAYC,MAAO,CAACC,gBAAgB,OAAD,OAASc,GAASX,IAAlB,QACrD,sBAAK1G,UAAWC,IAAEwH,UAAlB,UACI,4BACKH,IAEL,qBAAKtH,UAAWC,IAAEyH,YAAlB,SACI,2CAAa,sBAAM1H,UAAWC,IAAE0H,eAAnB,SAAoCJ,gB,SCXxDK,EAAUC,IAAMC,MAAK,YAA0C,IAAxCC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,QAC7C,IAAKD,EAAYhE,QACb,OAAO,wBAGX,IAAMkE,EAAeF,EAAYG,UAAUtD,KAAI,SAAAuD,GAAC,OAAI,cAAC,EAAD,CACMvB,GAAIuB,EAAEvB,GACNS,MAAOU,EAAYhE,QAAQyC,OAAOC,MAClCa,QAASa,EAAEb,QACXC,WAAYY,EAAEZ,YAJTY,EAAEvB,OAWjE,OACI,sBAAK5G,UAAWC,IAAEmI,UAAlB,UACI,oBAAIpI,UAAWC,IAAEoI,YAAjB,sBAIA,cAACC,EAAD,CAAoBtE,SAVP,SAACpD,GAClBoH,EAAQpH,EAAM2H,gBAWV,8BACKN,UAUXnH,EAAYD,YAAiB,IAqB7ByH,EAAqB1E,YAAwB,CAACC,KAAM,sBAA/BD,EAnBsC,SAACxD,GAAW,IAClE0D,EAAgB1D,EAAhB0D,aACP,OACI,uBAAME,SAAUF,EAAc9D,UAAWC,IAAEuI,cAA3C,UACI,8BACI,cAACrE,EAAA,EAAD,CAAOnE,UAAWC,IAAEuE,aACbF,UAAWnE,IACXsI,SAAU,CAAC9H,IAAUG,GACrByD,YAAa,kBACbF,KAAM,kBAGjB,qBAAKrE,UAAWC,IAAEyI,OAAlB,SACI,cAACxE,EAAA,EAAD,CAAahC,KAAM,SAAnB,8BC9BHyG,EAAmBrH,aAdR,SAACL,GACrB,MAAO,CACH8G,YAAa9G,EAAM8G,gBAIF,SAACa,GACtB,MAAO,CACHZ,QAAS,SAACO,GACNK,EAASC,YAAUN,QAKCjH,CAA6CsG,GCfhEkB,EAAU,SAAC,GAA8F,IAA7F/E,EAA4F,EAA5FA,QAASV,EAAmF,EAAnFA,OAAQJ,EAA2E,EAA3EA,eAAgBgC,EAA2D,EAA3DA,QAASgB,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,cAC5E,OACI,gCACI,cAAC,EAAD,CAAanC,QAASA,EACTV,OAAQA,EACRJ,eAAgBA,EAChBgC,QAASA,EACTgB,YAAaA,EACbC,cAAeA,IAE5B,cAACyC,EAAD,Q,0BCQNI,E,oKAEF,WACI,IAAIC,GAAUC,KAAK7I,MAAM4B,OAAOF,OAAOkH,QAAU,KAC5CA,IACDA,EAASC,KAAK7I,MAAM8I,kBAExBD,KAAK7I,MAAM+I,iBAAiBH,GAC5BC,KAAK7I,MAAMgJ,YAAYJ,K,+BAG3B,WACIC,KAAKI,mB,gCAGT,SAAmBC,EAA2CC,EAAmCC,GACzFP,KAAK7I,MAAM4B,OAAOF,OAAOkH,SAAWM,EAAUtH,OAAOF,OAAOkH,QAC5DC,KAAKI,mB,oBAIb,WACI,OACI,8BACI,cAAC,EAAD,CAAStF,QAASkF,KAAK7I,MAAM2D,QACpBV,OAAQ4F,KAAK7I,MAAMiD,OACnBJ,eAAgBgG,KAAK7I,MAAM6C,eAC3BgC,SAAUgE,KAAK7I,MAAM4B,OAAOF,OAAOkH,OACnC/C,YAAagD,KAAK7I,MAAM6F,YACxBC,cAAe+C,KAAK7I,MAAM8F,sB,GA7BpB2B,IAAMxG,WA6CtBoI,4BACXnI,aAVkB,SAACL,GACnB,MAAO,CACH8C,QAAS9C,EAAM8G,YAAYhE,QAC3BV,OAAQpC,EAAM8G,YAAY1E,OAC1B6F,iBAAkBjI,EAAME,KAAKyF,GAC7B1F,OAAQD,EAAME,KAAKD,UAKE,CAACiI,qBAAkBC,gBAAanG,mBAAgBgD,gBAAaC,oBACtF1E,IACAJ,IAHWqI,CAIbV","file":"static/js/4.8655490d.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\nconst FormControl = ({meta, children,}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...props.input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...props.input} {...restProps} /></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3RLDu\",\"error\":\"FormsControls_error__2bFT9\",\"formSummaryError\":\"FormsControls_formSummaryError__3yqtq\"};","\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n\r\n    return (value: string) => {\r\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbol`\r\n        return undefined\r\n    }\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../redux/reduxStore';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import {useLocation, useNavigate, useParams} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\ntype ComponentWithRouterPropsType = {\r\n    location: any\r\n    navigate: any\r\n    params: { userId: string }\r\n}\r\nexport type WithRouterType = {\r\n    router: ComponentWithRouterPropsType\r\n}\r\n\r\nexport const withRouter = (WrapperComponent: typeof React.Component) => (props: object) => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n\r\n    return (\r\n        <WrapperComponent\r\n            {...props} router={{location, navigate, params}}\r\n        />\r\n    )\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"ProfileInfo_profileBlock__1PQ7x\",\"avatarBlock\":\"ProfileInfo_avatarBlock__Fh7nk\",\"userAvatar\":\"ProfileInfo_userAvatar__2BpTD\",\"buttonFileContainer\":\"ProfileInfo_buttonFileContainer__6GHOh\",\"inputFile\":\"ProfileInfo_inputFile__wWsCy\",\"editModeContainer\":\"ProfileInfo_editModeContainer__tA0ME\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInputText_superInput__3mjSu\",\"errorInput\":\"SuperInputText_errorInput__2EBl_\",\"error\":\"SuperInputText_error__3VsDV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"editFormContainer\":\"ProfileDataForm_editFormContainer__3iWzT\",\"formInput\":\"ProfileDataForm_formInput__Cftli\",\"formTextarea\":\"ProfileDataForm_formTextarea__2zdJw\",\"contactValue\":\"ProfileDataForm_contactValue__3Acrx\",\"formSummaryError\":\"ProfileDataForm_formSummaryError__2Q506\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileDataContainer\":\"ProfileData_profileDataContainer__uYUqR\",\"contact\":\"ProfileData_contact__1fYCI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"potsBlock\":\"MyPosts_potsBlock__1_gEb\",\"myPostTitle\":\"MyPosts_myPostTitle__4t9io\",\"addMyPostForm\":\"MyPosts_addMyPostForm__3OOVj\",\"formTextarea\":\"MyPosts_formTextarea__rOPxr\",\"button\":\"MyPosts_button__3Oxb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__16LHN\",\"userAvatar\":\"Post_userAvatar__1jloA\",\"textBlock\":\"Post_textBlock__3eGaw\",\"likeWrapper\":\"Post_likeWrapper__3CmmI\",\"postLikesCount\":\"Post_postLikesCount__1j5xR\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\nimport s from './SuperInputText.module.css'\n\n// тип пропсов обычного инпута\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\n\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\ntype SuperInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\n    onChangeText?: (value: string) => void\n    onEnter?: () => void\n    error?: string\n    spanClassName?: string\n}\n\nconst SuperInputText: React.FC<SuperInputTextPropsType> = (\n    {\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\n        onChange, onChangeText,\n        onKeyPress, onEnter,\n        error,\n        className, spanClassName,\n\n        ...restProps// все остальные пропсы попадут в объект restProps\n    }\n) => {\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange // если есть пропс onChange\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\n\n        onChangeText && onChangeText(e.currentTarget.value)\n    }\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\n        onKeyPress && onKeyPress(e);\n\n        onEnter // если есть пропс onEnter\n        && e.key === 'Enter' // и если нажата кнопка Enter\n        && onEnter() // то вызвать его\n    }\n\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\n    const finalInputClassName = error ? s.errorInput : `${className} ${s.superInput}`\n   /* const finalInputClassName = `${s.errorInput} ${className}` // need to fix with (?:) and s.superInput*/\n\n    return (\n        <div>\n            <input\n                type={'text'}\n                onChange={onChangeCallback}\n                onKeyPress={onKeyPressCallback}\n                className={finalInputClassName}\n\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\n            />\n            {error && <div className={finalSpanClassName}>{error}</div>}\n        </div>\n    )\n}\n\nexport default SuperInputText\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport SuperInputText from '../../../Common/SuperInputText/SuperInputText';\r\n\r\nexport type ProfileStatusPropsType = {\r\n    statusText: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const {statusText,updateStatusTC} = props\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(statusText)\r\n\r\n    useEffect( ()=>{\r\n        setStatus(status)\r\n    }, [status, statusText])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatusTC(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{statusText || 'Double click to enter'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <SuperInputText\r\n                        autoFocus\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from '../../../Common/FormsControls/FormsControls';\r\nimport {ProfileType} from '../../../../redux/profileReducer';\r\nimport s from './ProfileDataForm.module.scss'\r\nimport SuperButton from '../../../Common/SuperButton/SuperButton';\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType;\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType> = (props) => {\r\n    const {error, handleSubmit, profile} = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.editFormContainer}>\r\n            <div>\r\n                <div>\r\n                    <SuperButton>\r\n                        Save\r\n                    </SuperButton>\r\n                </div>\r\n                <div>\r\n                    <p>\r\n                        <b>Full name</b> :\r\n                        <Field className={s.formInput} name={'fullName'} component={Input} placeholder={'Full name'}/>\r\n                    </p>\r\n                </div>\r\n                <div>\r\n                    <p>\r\n                        <b>looking for a job</b> :\r\n                        <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/>\r\n                    </p>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>\r\n                        <b>My skills</b> :\r\n                        <Field className={s.formTextarea} name={'lookingForAJobDescription'} component={Textarea}\r\n                               placeholder={'My skills'}/>\r\n                    </p>\r\n                </div>\r\n\r\n                <div>\r\n                    <p>\r\n                        <b>About me</b> :\r\n                        <Field className={s.formTextarea} name={'aboutMe'} component={Textarea}\r\n                               placeholder={'About me'}/>\r\n                    </p>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:\r\n                {Object.keys(profile.contacts).map((key, index) => {\r\n                    return (\r\n                        <div className={s.contactValue} key={index}>\r\n                            <b>{key}</b> : <Field className={s.formInput} name={'contacts.' + key} component={Input}\r\n                                                  placeholder={key}/>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm","import {Preloader} from '../../../Common/Preloader/Preloader';\r\nimport s from './ProfileData.module.scss';\r\nimport React from 'react';\r\nimport {ProfileType} from '../../../../redux/profileReducer';\r\nimport SuperButton from '../../../Common/SuperButton/SuperButton';\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const keysContacts = Object.keys(profile.contacts)\r\n    const valuesContacts = Object.values(profile.contacts)\r\n\r\n    return (\r\n        <div className={s.profileDataContainer}>\r\n            <h2>{profile.fullName}</h2>\r\n            <div>\r\n                {isOwner &&\r\n                    <SuperButton onClick={goToEditMode}>\r\n                        Edit profile\r\n                    </SuperButton>}\r\n            </div>\r\n            <div className={s.contact}>\r\n                <b>Contacts</b>:\r\n                {\r\n                    keysContacts.map((key, index) => {\r\n                        return <Contact key={index}\r\n                                        contactTitle={key}\r\n                                        contactValue={valuesContacts[index]}\r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n\r\n            <p><b>looking for a job</b>: {profile.lookingForAJob ? <span>YES</span> : <span>NO</span>}</p>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <p><b>My skills</b>: {profile.lookingForAJobDescription}</p>\r\n                </div>}\r\n            <p><b>About me</b>: {profile.aboutMe}</p>\r\n        </div>\r\n    )\r\n}\r\nexport type ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return (\r\n        <div>\r\n            {\r\n                contactValue &&\r\n                <div>\r\n                    <b>{contactTitle}</b>: {contactValue}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.scss'\r\nimport {Preloader} from '../../Common/Preloader/Preloader';\r\nimport {ProfileType} from '../../../redux/profileReducer';\r\nimport userPhoto from '../../../assets/images/userIcon.png';\r\nimport {ProfileStatusWithHooks} from './ProfileStatus/ProfileStatusWithHooks';\r\nimport ProfileDataForm from './ProfileData/ProfileDataForm';\r\nimport {ProfileData} from './ProfileData/ProfileData';\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatusTC: (status: string) => any\r\n    savePhotoTC: (file: File) => any\r\n    saveProfileTC: (formData: ProfileType) => any\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileInfo = ({\r\n                                profile,\r\n                                status,\r\n                                updateStatusTC,\r\n                                isOwner,\r\n                                savePhotoTC,\r\n                                saveProfileTC\r\n                            }: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onChangePhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhotoTC(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (profile: ProfileType) => {\r\n        saveProfileTC(profile)\r\n            .then(() => {\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <div className={s.avatarBlock}>\r\n                <div className={s.userAvatar} style={{backgroundImage: `url(${profile.photos.large || userPhoto})`}}/>\r\n                {\r\n                    isOwner && <div className={s.buttonFileContainer}>\r\n                        <input type=\"file\"\r\n                               name=\"file\"\r\n                               id=\"file\"\r\n                               className={s.inputFile}\r\n                               onChange={onChangePhotoSelected}\r\n                        />\r\n                        <label htmlFor=\"file\">Change avatar</label>\r\n                    </div>\r\n                }\r\n\r\n            </div>\r\n            <div className={s.editModeContainer}>\r\n                {\r\n                    isOwner\r\n                        ? <ProfileStatusWithHooks statusText={status} updateStatusTC={updateStatusTC}/>\r\n                        : <div><b>Status: </b><span>{status}</span></div>\r\n                }\r\n                {\r\n                    editMode\r\n                        ? <ProfileDataForm initialValues={profile}\r\n                                           onSubmit={onSubmit}\r\n                                           profile={profile}\r\n                        />\r\n                        : <ProfileData profile={profile}\r\n                                       isOwner={isOwner}\r\n                                       goToEditMode={() => setEditMode(true)}\r\n                        />\r\n                }\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.scss'\r\nimport userPhoto from '../../../../assets/images/userIcon.png';\r\n\r\ntype PostPropsType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n    photo: string\r\n}\r\n\r\nexport const Post = ({photo, message, likesCount,}: PostPropsType) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <div className={s.userAvatar} style={{backgroundImage: `url(${photo || userPhoto})`}}/>\r\n            <div className={s.textBlock}>\r\n                <p>\r\n                    {message}\r\n                </p>\r\n                <div className={s.likeWrapper}>\r\n                    <span>likes: <span className={s.postLikesCount}>{likesCount}</span></span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.scss'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../Common/FormsControls/FormsControls';\r\nimport SuperButton from '../../Common/SuperButton/SuperButton';\r\n\r\nexport const MyPosts = React.memo(({profilePage, AddPost}: MyPostsType) => {\r\n    if (!profilePage.profile) {\r\n        return <div/>\r\n    }\r\n\r\n    const postElements = profilePage.postsData.map(m => <Post key={m.id}\r\n                                                              id={m.id}\r\n                                                              photo={profilePage.profile.photos.large}\r\n                                                              message={m.message}\r\n                                                              likesCount={m.likesCount}\r\n    />)\r\n\r\n    const addNewMyPost = (value: FormDataType) => {\r\n        AddPost(value.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.potsBlock}>\r\n            <h3 className={s.myPostTitle}>\r\n                My posts\r\n            </h3>\r\n\r\n            <AddMyPostFormRedux onSubmit={addNewMyPost}/>\r\n\r\n            <div>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\nconst AddMyPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n    return (\r\n        <form onSubmit={handleSubmit} className={s.addMyPostForm}>\r\n            <div>\r\n                <Field className={s.formTextarea}\r\n                       component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                       placeholder={'Enter your post'}\r\n                       name={'newPostBody'}\r\n                />\r\n            </div>\r\n            <div className={s.button}>\r\n                <SuperButton type={'submit'}>Add post</SuperButton>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm<FormDataType>({form: 'MyPostsAndPostForm'})(AddMyPostForm)","import {connect} from 'react-redux';\r\nimport {addPostAC, InitialStateProfileType} from '../../../redux/profileReducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppStateType} from '../../../redux/reduxStore';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type MyPostsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStateProfileType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    AddPost: (newPostBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddPost: (newPostBody: string) => {\r\n            dispatch(addPostAC(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../redux/profileReducer';\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatusTC: (status: string) => any\r\n    savePhotoTC: (file: File) => any\r\n    saveProfileTC: (formData: ProfileType) => any\r\n}\r\n\r\nexport const Profile = ({profile, status, updateStatusTC, isOwner, savePhotoTC, saveProfileTC}: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateStatusTC={updateStatusTC}\r\n                         isOwner={isOwner}\r\n                         savePhotoTC={savePhotoTC}\r\n                         saveProfileTC={saveProfileTC}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Profile} from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/reduxStore';\r\nimport {\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfileType,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    updateStatusTC\r\n} from '../../redux/profileReducer';\r\nimport {withRouter, WithRouterType} from '../Common/WithRouter/withRouter';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype ProfileContainerType = mapStateToPropsType & mapDispatchToProps & WithRouterType\r\n\r\ntype mapStateToPropsType = {\r\n    status: string\r\n    profile: ProfileType\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToProps = {\r\n    getUserProfileTC: (userId: number | null) => any\r\n    getStatusTC: (userId: number | null) => any\r\n    updateStatusTC: (status: string) => any\r\n    savePhotoTC: (file: File) => any\r\n    saveProfileTC: (formData: ProfileType) => any\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, AppStateType> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.router.params.userId || null\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<AppStateType>, snapshot?: any) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}\r\n                         isOwner={!this.props.router.params.userId}\r\n                         savePhotoTC={this.props.savePhotoTC}\r\n                         saveProfileTC={this.props.saveProfileTC}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC, savePhotoTC, saveProfileTC}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}
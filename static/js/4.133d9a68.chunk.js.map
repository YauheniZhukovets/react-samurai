{"version":3,"sources":["Component/common/FormsControls/FormsControls.tsx","Component/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","hoc/withAuthRedirect.tsx","Component/Profile/ProfileInfo/ProfileInfo.module.css","Component/Profile/MyPosts/MyPosts.module.css","Component/Profile/MyPosts/Post/Post.module.css","Component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Component/Profile/ProfileInfo/ProfileDataForm.tsx","Component/Profile/ProfileInfo/ProfileData.tsx","Component/Profile/ProfileInfo/ProfileInfo.tsx","Component/Profile/MyPosts/Post/Post.tsx","Component/Profile/MyPosts/MyPosts.tsx","Component/Profile/MyPosts/MyPostsContainer.tsx","Component/Profile/Profile.tsx","Component/Profile/ProfileInfo/ProfileContainer.tsx","Component/common/WithRouter/withRouter.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","props","input","child","restProps","Input","module","exports","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","ProfileStatusWithHooks","statusText","updateStatusTC","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","onBlur","type","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","onSubmit","Field","name","component","placeholder","Object","keys","contacts","map","key","index","contactValue","formSummaryError","ProfileData","isOwner","goToEditMode","Preloader","keysContacts","valuesContacts","values","fullName","onClick","contact","contactTitle","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","ProfileInfo","savePhotoTC","saveProfileTC","profileBlock","descriptionBlock","userPhoto","src","photos","large","alt","target","files","initialValues","then","Post","item","message","like","likesCount","id","MyPosts","React","memo","postElements","profilePage","postsData","m","potsBlock","AddMyPostFormRedux","AddPost","newPostBody","posts","validate","MyPostsContainer","dispatch","addPostAC","Profile","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfileTC","getStatusTC","refreshProfile","prevProps","prevState","snapshot","compose","WrapperComponent","location","useLocation","navigate","useNavigate","useParams"],"mappings":"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","file":"static/js/4.133d9a68.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl = ({meta, children,}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...props.input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...props.input} {...restProps} /></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1q-Xj\",\"error\":\"FormsControls_error__1xdco\",\"formSummaryError\":\"FormsControls_formSummaryError__1SBOo\"};","\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n\r\n    return (value: string) => {\r\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbol`\r\n        return undefined\r\n    }\r\n}\r\n\r\n","import React, {ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../Redux/reduxStore';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"ProfileInfo_profileBlock__2VEYW\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2owzz\",\"userPhoto\":\"ProfileInfo_userPhoto__3QJOY\",\"contact\":\"ProfileInfo_contact__rKBio\",\"contactValue\":\"ProfileInfo_contactValue__Fv1eU\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3JkGT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"potsBlock\":\"MyPosts_potsBlock__1yBfG\",\"posts\":\"MyPosts_posts__3E2cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Rf8ZZ\",\"like\":\"Post_like__2frtH\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusPropsType = {\r\n    statusText: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const {statusText,updateStatusTC} = props\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(statusText)\r\n\r\n    useEffect( ()=>{\r\n        setStatus(status)\r\n    }, [status, statusText])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatusTC(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status: </b><span onDoubleClick={activateEditMode}>{statusText || 'Double click to enter'}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        type=\"text\"\r\n                        value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input, Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {ProfileType} from '../../../Redux/profileReducer';\r\nimport s from './ProfileInfo.module.css'\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType;\r\n}\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, ProfileDataFormType> & ProfileDataFormType> = (props) => {\r\n    const {error, handleSubmit, profile} = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <p>\r\n                    <b>Full name</b> :\r\n                    <Field name={'fullName'} component={Input} placeholder={'Full name'}/>\r\n                </p>\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:\r\n                {Object.keys(profile.contacts).map((key, index) => {\r\n                    return (\r\n                        <div className={s.contactValue} key={index}>\r\n                            <b>{key}</b> : <Field name={'contacts.' + key} component={Input} placeholder={key}/>\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n            <div>\r\n                <p>\r\n                    <b>looking for a job</b> :\r\n                    <Field name={'lookingForAJob'} component={Input} type={'checkbox'}/>\r\n                </p>\r\n            </div>\r\n\r\n            <div>\r\n                <p>\r\n                    <b>My skills</b> :\r\n                    <Field name={'lookingForAJobDescription'} component={Textarea} placeholder={'My skills'}/>\r\n                </p>\r\n            </div>\r\n\r\n            <div>\r\n                <p>\r\n                    <b>About me</b> :\r\n                    <Field name={'aboutMe'} component={Textarea} placeholder={'About me'}/>\r\n                </p>\r\n            </div>\r\n            \r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, ProfileDataFormType>({form: 'edit-profile'})(ProfileDataForm)\r\nexport default ProfileDataFormReduxForm","import {Preloader} from '../../common/Preloader/Preloader';\r\nimport s from './ProfileInfo.module.css';\r\nimport React from 'react';\r\nimport {ProfileType} from '../../../Redux/profileReducer';\r\n\r\nexport type ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\nexport const ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const keysContacts = Object.keys(profile.contacts)\r\n    const valuesContacts = Object.values(profile.contacts)\r\n\r\n    return (\r\n        <div>\r\n            <h3>{profile.fullName}</h3>\r\n            <div>\r\n                {isOwner && <button onClick={goToEditMode}>Edit profile</button>}\r\n            </div>\r\n            <div className={s.contact}>\r\n                <b>Contacts</b>:\r\n                {keysContacts.map((key, index) => {\r\n                    return <Contact key={index} contactTitle={key} contactValue={valuesContacts[index]}/>\r\n                })}\r\n            </div>\r\n            <p><b>looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}</p>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <p><b>My skills</b>: {profile.lookingForAJobDescription}</p>\r\n                </div>}\r\n            <p><b>About me</b>: {profile.aboutMe}</p>\r\n        </div>\r\n    )\r\n}\r\nexport type ContactType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\nexport const Contact = ({contactTitle, contactValue}: ContactType) => {\r\n    return (\r\n        <div>\r\n            {contactValue && <div className={s.contactValue}><b>{contactTitle}</b>: {contactValue}</div>}\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileType} from '../../../Redux/profileReducer';\r\nimport userPhoto from '../../../assets/images/userIcon.png';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport {ProfileData} from './ProfileData';\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatusTC: (status: string) => any\r\n    savePhotoTC: (file: File) => any\r\n    saveProfileTC: (formData: ProfileType) => any\r\n    isOwner: boolean\r\n}\r\n\r\nexport const ProfileInfo = ({\r\n                                profile,\r\n                                status,\r\n                                updateStatusTC,\r\n                                isOwner,\r\n                                savePhotoTC,\r\n                                saveProfileTC\r\n                            }: ProfileInfoPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onChangePhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files) {\r\n            savePhotoTC(e.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onSubmit = (profile: ProfileType) => {\r\n        saveProfileTC(profile)\r\n            .then(()=>{\r\n                setEditMode(false)\r\n            })\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={s.profileBlock}>\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.userPhoto} src={profile.photos.large || userPhoto} alt={'img'}/>\r\n                {isOwner && <div><input type=\"file\" onChange={onChangePhotoSelected}/></div>}\r\n                <ProfileStatusWithHooks statusText={status} updateStatusTC={updateStatusTC}/>\r\n            </div>\r\n            {\r\n                editMode\r\n                    ? <ProfileDataForm initialValues={profile} onSubmit={onSubmit} profile={profile}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => setEditMode(true)}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {PostType} from '../../../../Redux/profileReducer';\r\n\r\nexport const Post = ({...props}: PostType) => {\r\n    return (\r\n        <div key={props.id}\r\n             className={s.item}>\r\n            <img src=\"https://i.pinimg.com/236x/73/b0/c0/73b0c08a5d1578cb976a00d8665ffd77--all-blacks-rugby-wutang.jpg\"\r\n                 alt=\"avatar\"/>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div className={s.like}>\r\n                <span>{props.likesCount} likes!</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    const postElements = props.profilePage.postsData.map(m => <Post key={m.id}\r\n                                                                    id={m.id}\r\n                                                                    message={m.message}\r\n                                                                    likesCount={m.likesCount}\r\n\r\n    />)\r\n\r\n    const addNewMyPost = (value: FormDataType) => {\r\n        props.AddPost(value.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.potsBlock}>\r\n            My posts\r\n            <AddMyPostFormRedux onSubmit={addNewMyPost}/>\r\n            <div>\r\n                New post\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nconst AddMyPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                       placeholder={'Enter your post'}\r\n                       name={'newPostBody'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm<FormDataType>({form: 'MyPostsAndPostForm'})(AddMyPostForm)","import {connect} from 'react-redux';\r\nimport {addPostAC, InitialStateProfileType} from '../../../Redux/profileReducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppStateType} from '../../../Redux/reduxStore';\r\nimport {Dispatch} from 'redux';\r\n\r\n\r\nexport type MyPostsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: InitialStateProfileType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    AddPost: (newPostBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddPost: (newPostBody: string) => {\r\n            dispatch(addPostAC(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../Redux/profileReducer';\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isOwner: boolean\r\n    updateStatusTC: (status: string) => any\r\n    savePhotoTC: (file: File) => any\r\n    saveProfileTC: (formData: ProfileType) => any\r\n}\r\n\r\nexport const Profile = ({profile, status, updateStatusTC, isOwner, savePhotoTC, saveProfileTC}: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateStatusTC={updateStatusTC}\r\n                         isOwner={isOwner}\r\n                         savePhotoTC={savePhotoTC}\r\n                         saveProfileTC={saveProfileTC}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Profile} from '../Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../Redux/reduxStore';\r\nimport {\r\n    getStatusTC,\r\n    getUserProfileTC,\r\n    ProfileType,\r\n    savePhotoTC,\r\n    saveProfileTC,\r\n    updateStatusTC\r\n} from '../../../Redux/profileReducer';\r\nimport {withRouter, WithRouterType} from '../../common/WithRouter/withRouter';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect';\r\n\r\ntype ProfileContainerType = mapStateToPropsType & mapDispatchToProps & WithRouterType\r\n\r\ntype mapStateToPropsType = {\r\n    status: string\r\n    profile: ProfileType\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToProps = {\r\n    getUserProfileTC: (userId: number | null) => any\r\n    getStatusTC: (userId: number | null) => any\r\n    updateStatusTC: (status: string) => any\r\n    savePhotoTC: (file: File) => any\r\n    saveProfileTC: (formData: ProfileType) => any\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, AppStateType> {\r\n\r\n    refreshProfile() {\r\n        let userId = +this.props.router.params.userId || null\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<AppStateType>, snapshot?: any) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}\r\n                         isOwner={!this.props.router.params.userId}\r\n                         savePhotoTC={this.props.savePhotoTC}\r\n                         saveProfileTC={this.props.saveProfileTC}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC, savePhotoTC, saveProfileTC}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n","import {useLocation, useNavigate, useParams} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\ntype ComponentWithRouterPropsType = {\r\n    location: any\r\n    navigate: any\r\n    params: { userId: string }\r\n}\r\nexport type WithRouterType = {\r\n    router: ComponentWithRouterPropsType\r\n}\r\n\r\nexport const withRouter = (WrapperComponent: typeof React.Component) => (props: object) => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n\r\n    return (\r\n        <WrapperComponent\r\n            {...props} router={{location, navigate, params}}\r\n        />\r\n    )\r\n}\r\n\r\n"],"sourceRoot":""}
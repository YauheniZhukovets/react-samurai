{"version":3,"sources":["Component/common/FormsControls/FormsControls.tsx","Component/common/FormsControls/FormsControls.module.css","utils/validators/validators.ts","Component/Login/Login.tsx"],"names":["FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","props","input","child","restProps","Input","module","exports","required","value","maxLengthCreator","maxLength","length","LoginReduxForm","reduxForm","form","handleSubmit","captcha","onSubmit","validate","name","component","placeholder","type","formSummaryError","src","alt","connect","state","isAuth","auth","captchaUrl","loginTC","to","formData"],"mappings":"kOAIMA,EAAc,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,SAClBC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,sBAAKC,UAAS,UAAKC,IAAEC,YAAP,YAAsBL,EAAWI,IAAEF,MAAQ,IAAzD,UACI,8BACKH,IAEJC,GAAY,+BAAOF,EAAKI,YAKxBI,EAAW,SAACC,GACsBA,EAApCC,MAAoCD,EAA7BT,KAA6BS,EAAvBE,MADiB,IACPC,EADM,YACOH,EADP,0BAEpC,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAyB,oDAAcA,EAAMC,OAAWE,QAGtDC,EAAQ,SAACJ,GAC4BA,EAAvCC,MAAuCD,EAAhCT,KAAgCS,EAA1BR,SADc,IACDW,EADA,YACaH,EADb,6BAEjC,OAAO,cAACV,EAAD,2BAAiBU,GAAjB,aAAyB,iDAAWA,EAAMC,OAAWE,S,oBCvBhEE,EAAOC,QAAU,CAAC,YAAc,mCAAmC,MAAQ,6BAA6B,iBAAmB,0C,iCCA3H,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EACJ,MAAO,qBAGEC,EAAmB,SAACC,GAE7B,OAAO,SAACF,GACJ,GAAIA,GAASA,EAAMG,OAASD,EAAW,MAAM,iBAAN,OAAwBA,EAAxB,c,iCCT/C,oGAoCME,EAAiBC,YAA0C,CAACC,KAAM,SAAjDD,EApBwE,SAACb,GAAW,IAChGe,EAAgCf,EAAhCe,aAAcpB,EAAkBK,EAAlBL,MAAOqB,EAAWhB,EAAXgB,QAE5B,OACI,uBAAMC,SAAUF,EAAhB,UACI,8BAAK,cAAC,IAAD,CAAOG,SAAU,CAACX,KAAWY,KAAM,QAASC,UAAWhB,IAAOiB,YAAa,YAChF,8BAAK,cAAC,IAAD,CAAOH,SAAU,CAACX,KAAWY,KAAM,WAAYC,UAAWhB,IAAOiB,YAAa,WACvEC,KAAM,eAClB,gCAAK,cAAC,IAAD,CAAOH,KAAM,aAAcC,UAAWhB,IAAOkB,KAAM,aAAxD,iBACC3B,GAAS,qBAAKC,UAAWC,IAAE0B,iBAAlB,SAAqC5B,IAC9CqB,GAAW,qBAAKQ,IAAKR,EAASS,IAAI,YAClCT,GAAW,cAAC,IAAD,CAAOE,SAAU,CAACX,KAAWY,KAAM,UAAWC,UAAWhB,IAAOiB,YAAa,uBAEzF,8BACI,wBAAQC,KAAM,SAAd,2BA4BDI,uBALS,SAACC,GAAD,MAA0B,CAC9CC,OAAQD,EAAME,KAAKD,OACnBZ,QAASW,EAAME,KAAKC,cAGgB,CAACC,aAA1BL,EApBD,SAAC,GAAoD,IAAnDK,EAAkD,EAAlDA,QAASH,EAAyC,EAAzCA,OAAQZ,EAAiC,EAAjCA,QAM7B,OAAIY,EACO,cAAC,IAAD,CAAUI,GAAI,aAElB,gCACH,uCACA,cAACpB,EAAD,CAAgBK,SATH,SAACgB,GACdF,EAAQE,IAQ4BjB,QAASA","file":"static/js/7.89345b7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl = ({meta, children,}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...props.input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...props.input} {...restProps} /></FormControl>\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1q-Xj\",\"error\":\"FormsControls_error__1xdco\",\"formSummaryError\":\"FormsControls_formSummaryError__1SBOo\"};","\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n\r\n    return (value: string) => {\r\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbol`\r\n        return undefined\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Input} from '../common/FormsControls/FormsControls';\r\nimport {required} from '../../utils/validators/validators';\r\nimport {connect} from 'react-redux';\r\nimport {loginTC} from '../../Redux/authReducer';\r\nimport {LoginParamsType} from '../../API/api';\r\nimport {AppStateType} from '../../Redux/reduxStore';\r\nimport {Navigate} from 'react-router-dom';\r\nimport s from '../common/FormsControls/FormsControls.module.css'\r\n\r\n\r\ntype LoginFormType = {\r\n    captcha: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginParamsType, LoginFormType> & LoginFormType> = (props) => {\r\n    const {handleSubmit, error, captcha} = props\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field validate={[required]} name={'email'} component={Input} placeholder={'Email'}/></div>\r\n            <div><Field validate={[required]} name={'password'} component={Input} placeholder={'Password'}\r\n                        type={'password'}/></div>\r\n            <div><Field name={'rememberMe'} component={Input} type={'checkbox'}/>remember me</div>\r\n            {error && <div className={s.formSummaryError}>{error}</div>}\r\n            {captcha && <img src={captcha} alt=\"captcha\"/>}\r\n            {captcha && <Field validate={[required]} name={'captcha'} component={Input} placeholder={'Symbols from image'}/>}\r\n\r\n            <div>\r\n                <button type={'submit'}>Login</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst LoginReduxForm = reduxForm<LoginParamsType, LoginFormType>({form: 'login'})(LoginForm)\r\n\r\nconst Login = ({loginTC, isAuth, captcha}: LoginContainerType) => {\r\n\r\n    const onSubmit = (formData: LoginParamsType) => {\r\n        loginTC(formData)\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captcha={captcha}/>\r\n    </div>\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captcha: state.auth.captchaUrl,\r\n})\r\n\r\nexport default connect(mapStateToProps, {loginTC})(Login)\r\n\r\ntype LoginContainerType = MapDispatchToProps & MapStateToProps\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n    captcha: string | null\r\n}\r\ntype MapDispatchToProps = {\r\n    loginTC: Function\r\n}"],"sourceRoot":""}
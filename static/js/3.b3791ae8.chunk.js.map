{"version":3,"sources":["hoc/withAuthRedirect.tsx","Component/Profile/ProfileInfo/ProfileInfo.module.css","Component/Profile/MyPosts/MyPosts.module.css","Component/Profile/MyPosts/Post/Post.module.css","Component/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Component/Profile/ProfileInfo/ProfileInfo.tsx","Component/Profile/MyPosts/Post/Post.tsx","Component/Profile/MyPosts/MyPosts.tsx","Component/Profile/MyPosts/MyPostsContainer.tsx","Component/Profile/Profile.tsx","Component/Profile/ProfileInfo/ProfileContainer.tsx","Component/common/WithRouter/withRouter.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","statusText","updateStatusTC","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","type","ProfileInfo","profile","Preloader","noData","className","s","profileBlock","descriptionBlock","userPhoto","src","photos","small","alt","fullName","contact","contacts","vk","github","facebook","twitter","instagram","mainLink","website","youtube","aboutMe","lookingForAJobDescription","Post","item","message","like","likesCount","id","MyPosts","React","memo","postElements","profilePage","postsData","map","m","potsBlock","AddMyPostFormRedux","onSubmit","AddPost","newPostBody","posts","maxLength","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","validate","required","placeholder","name","MyPostsContainer","dispatch","addPostAC","Profile","ProfileContainer","userId","this","router","params","authorizedUserId","getUserProfileTC","getStatusTC","compose","WrapperComponent","location","useLocation","navigate","useNavigate","useParams"],"mappings":"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","file":"static/js/3.b3791ae8.chunk.js","sourcesContent":["import React, {Component, ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../Redux/reduxStore';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileBlock\":\"ProfileInfo_profileBlock__2VEYW\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__2owzz\",\"userPhoto\":\"ProfileInfo_userPhoto__3QJOY\",\"contact\":\"ProfileInfo_contact__rKBio\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"potsBlock\":\"MyPosts_potsBlock__1yBfG\",\"posts\":\"MyPosts_posts__3E2cw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__Rf8ZZ\",\"like\":\"Post_like__2frtH\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\nexport type ProfileStatusPropsType = {\r\n    statusText: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusPropsType> = (props) => {\r\n    const {statusText,updateStatusTC} = props\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(statusText)\r\n\r\n    useEffect( ()=>{\r\n        setStatus(status)\r\n    }, [status, statusText])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        updateStatusTC(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                        <span onDoubleClick={activateEditMode}>\r\n                            {statusText || 'Введите статус'}\r\n                        </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input\r\n                        autoFocus\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        type=\"text\"\r\n                        value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileType} from '../../../Redux/profileReducer';\r\nimport userPhoto from '../../../assets/images/userIcon.png';\r\nimport {ProfileStatusWithHooks} from './ProfileStatusWithHooks';\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const ProfileInfo = ({profile, status, updateStatusTC,}: ProfileInfoPropsType) => {\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const noData = 'не указан'\r\n    return (\r\n        <div className={s.profileBlock}>\r\n\r\n            <div className={s.descriptionBlock}>\r\n                <img className={s.userPhoto} src={profile.photos.small ? profile.photos.small : userPhoto}\r\n                     alt={'img'}/>\r\n\r\n                <ProfileStatusWithHooks statusText={status} updateStatusTC={updateStatusTC}/>\r\n\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n            <div>\r\n                <span className={s.contact}>\r\n                <h3>Контакты</h3>\r\n                <p><b>vk: </b>{profile.contacts.vk ? profile.contacts.vk : noData}</p>\r\n                <p><b>github: </b>{profile.contacts.github ? profile.contacts.github : noData}</p>\r\n                <p><b>facebook: </b>{profile.contacts.facebook ? profile.contacts.facebook : noData}</p>\r\n                <p><b>twitter: </b>{profile.contacts.twitter ? profile.contacts.twitter : noData}</p>\r\n                <p><b>instagram: </b>{profile.contacts.instagram ? profile.contacts.facebook : noData}</p>\r\n                <p><b>mainLink: </b>{profile.contacts.mainLink ? profile.contacts.mainLink : noData}</p>\r\n                <p><b>website: </b>{profile.contacts.website ? profile.contacts.website : noData}</p>\r\n                <p><b>youtube: </b>{profile.contacts.youtube ? profile.contacts.youtube : noData}</p>\r\n            </span>\r\n                <p><b>Обо мне: </b>{profile.aboutMe}</p>\r\n                <p>\r\n                    <b>Ищу\r\n                        работу: </b>{profile.lookingForAJobDescription ? profile.lookingForAJobDescription : noData}\r\n                </p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Post.module.css'\r\nimport {PostType} from '../../../../Redux/profileReducer';\r\n\r\nexport const Post = ({...props}: PostType) => {\r\n    return (\r\n        <div key={props.id}\r\n             className={s.item}>\r\n            <img src=\"https://i.pinimg.com/236x/73/b0/c0/73b0c08a5d1578cb976a00d8665ffd77--all-blacks-rugby-wutang.jpg\"\r\n                 alt=\"avatar\"/>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div className={s.like}>\r\n                <span>{props.likesCount} likes!</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './MyPosts.module.css'\r\nimport {Post} from './Post/Post';\r\nimport {MyPostsType} from './MyPostsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {maxLengthCreator, required} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n\r\n    const postElements = props.profilePage.postsData.map(m => <Post key={m.id}\r\n                                                                    id={m.id}\r\n                                                                    message={m.message}\r\n                                                                    likesCount={m.likesCount}\r\n\r\n    />)\r\n\r\n    const addNewMyPost = (value: FormDataType) => {\r\n        props.AddPost(value.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.potsBlock}>\r\n            My posts\r\n            <AddMyPostFormRedux onSubmit={addNewMyPost}/>\r\n            <div>\r\n                New post\r\n            </div>\r\n            <div className={s.posts}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\ntype FormDataType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(10)\r\n\r\nconst AddMyPostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                       placeholder={'Enter your post'}\r\n                       name={'newPostBody'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMyPostFormRedux = reduxForm<FormDataType>({form: 'MyPostsAndPostForm'})(AddMyPostForm)","import {connect} from 'react-redux';\r\nimport {addPostAC, initialStateProfileType} from '../../../Redux/profileReducer';\r\nimport {MyPosts} from './MyPosts';\r\nimport {AppStateType} from '../../../Redux/reduxStore';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport type MyPostsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: initialStateProfileType\r\n}\r\ntype mapDispatchToPropsType = {\r\n    AddPost: (newPostBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddPost: (newPostBody: string) => {\r\n            dispatch(addPostAC(newPostBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfileType} from '../../Redux/profileReducer';\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatusTC: (status: string) => void\r\n}\r\n\r\nexport const Profile = ({profile, status, updateStatusTC,}: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={profile}\r\n                         status={status}\r\n                         updateStatusTC={updateStatusTC}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Profile} from '../Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../Redux/reduxStore';\r\nimport {getStatusTC, getUserProfileTC, ProfileType, updateStatusTC} from '../../../Redux/profileReducer';\r\nimport {withRouter, WithRouterType} from '../../common/WithRouter/withRouter';\r\nimport {compose} from 'redux';\r\nimport {withAuthRedirect} from '../../../hoc/withAuthRedirect';\r\n\r\ntype ProfileContainerType = mapStateToPropsType & mapDispatchToProps & WithRouterType\r\n\r\ntype mapStateToPropsType = {\r\n    status: string\r\n    profile: ProfileType | null\r\n    authorizedUserId: number | null\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToProps = {\r\n    getUserProfileTC: (userId: number | null) => Function\r\n    getStatusTC: (userId: number | null) => Function\r\n    updateStatusTC: (status: string) => Function\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, AppStateType> {\r\n    componentDidMount() {\r\n        let userId  = +this.props.router.params.userId || null\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n        }\r\n        this.props.getUserProfileTC(userId)\r\n        this.props.getStatusTC(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile profile={this.props.profile}\r\n                         status={this.props.status}\r\n                         updateStatusTC={this.props.updateStatusTC}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer)\r\n","import {useLocation, useNavigate, useParams} from 'react-router-dom';\r\nimport React from 'react';\r\n\r\ntype ComponentWithRouterPropsType = {\r\n    location: any\r\n    navigate: any\r\n    params: { userId: string }\r\n}\r\nexport type WithRouterType = {\r\n    router: ComponentWithRouterPropsType\r\n}\r\n\r\nexport const withRouter = (WrapperComponent: typeof React.Component) => (props: object) => {\r\n    const location = useLocation();\r\n    const navigate = useNavigate();\r\n    const params = useParams();\r\n\r\n    return (\r\n        <WrapperComponent\r\n            {...props} router={{location, navigate, params}}\r\n        />\r\n    )\r\n}\r\n\r\n"],"sourceRoot":""}
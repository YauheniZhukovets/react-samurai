{"version":3,"sources":["Component/common/FormsControls/FormsControls.module.css","Component/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","Component/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","Component/Dialogs/Message/Message.tsx","Component/Dialogs/DialogsItem/DialogsItem.tsx","Component/Dialogs/Dialogs.tsx","Component/Dialogs/DialogsContainer.tsx"],"names":["module","exports","FormControl","meta","children","hasError","touched","error","className","s","formControl","Textarea","props","input","child","restProps","Input","required","value","maxLengthCreator","maxLength","length","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","to","Message","message","dialog","DialogItems","id","name","path","AddMessageFormRedux","reduxForm","form","handleSubmit","onSubmit","Field","component","validate","placeholder","type","compose","dialogsPage","dispatch","AddMessage","newMessageBody","AddMessageAC","dialogElement","dialogsData","map","m","messageElement","massagesData","dialogs","dialogsItems","messages","values"],"mappings":"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","file":"static/js/5.b425919e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__1q-Xj\",\"error\":\"FormsControls_error__1xdco\",\"formSummaryError\":\"FormsControls_formSummaryError__1SBOo\"};","import React from 'react';\r\nimport s from './FormsControls.module.css'\r\n\r\n\r\nconst FormControl = ({meta, children,}: any) => {\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return <FormControl {...props} ><textarea {...props.input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, children, ...restProps} = props\r\n    return <FormControl {...props} ><input {...props.input} {...restProps} /></FormControl>\r\n}\r\n","\r\nexport const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => {\r\n\r\n    return (value: string) => {\r\n        if (value && value.length > maxLength) return `Max length is ${maxLength} symbol`\r\n        return undefined\r\n    }\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__DuvPV\",\"dialogsItems\":\"Dialogs_dialogsItems__WSdAR\",\"active\":\"Dialogs_active__31eY6\",\"messages\":\"Dialogs_messages__-YLeO\"};","import React, {Component, ComponentType} from 'react';\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../Redux/reduxStore';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Navigate to=\"/login\"/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = ({message,}: MessagePropsType) => {\r\n\r\n    return <div className={s.dialog}>{message}</div>\r\n}\r\n","import React from 'react';\r\nimport s from '../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\ntype DialogItemsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItems = ({id, name,}: DialogItemsType) => {\r\n    let path = '/dialogs/' + id\r\n\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{name}</NavLink>\r\n    </div>\r\n}\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport {Message} from './Message/Message';\r\nimport {DialogItems} from './DialogsItem/DialogsItem';\r\nimport {DialogsPropsType} from './DialogsContainer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\n\r\nexport const Dialogs = ({dialogsPage, AddMessage,}: DialogsPropsType) => {\r\n\r\n    const dialogElement = dialogsPage.dialogsData.map((m) => <DialogItems key={m.id} name={m.name} id={m.id}/>)\r\n\r\n    const messageElement = dialogsPage.massagesData.map((m) => <Message key={m.id} message={m.message}/>)\r\n\r\n    const addNewMessage = (values: FormDataType) => {\r\n        AddMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.dialogs}>\r\n                <div className={s.dialogsItems}>\r\n                    {dialogElement}\r\n                </div>\r\n                <div className={s.messages}>\r\n                    <div>{messageElement}</div>\r\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    const {handleSubmit} = props\r\n\r\n    return (<form onSubmit={handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength]}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type={'submit'}>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)","import {connect} from 'react-redux';\r\nimport {AddMessageAC, InitialStateDialogsType} from '../../Redux/dialogsReducer';\r\nimport {AppStateType} from '../../Redux/reduxStore';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {Dialogs} from './Dialogs';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport React from 'react';\r\n\r\nexport type DialogsPropsType = MapStateToPropsType & mapDispatchToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: InitialStateDialogsType\r\n    isAuth: boolean\r\n}\r\ntype mapDispatchToPropsType = {\r\n    AddMessage: (newMessageBody: string) => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        AddMessage: (newMessageBody: string) => {\r\n            dispatch(AddMessageAC(newMessageBody))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}